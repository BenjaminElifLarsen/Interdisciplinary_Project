// <auto-generated />
using Domain.IPL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.IPL.Migrations.Lifeform
{
    [DbContext(typeof(LifeformContext))]
    [Migration("20230207084328_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("EukaryoteSequence");

            modelBuilder.Entity("Domain.DL.Models.LifeformModels.Eukaryote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [EukaryoteSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Domain.DL.Models.LifeformModels.Animalia", b =>
                {
                    b.HasBaseType("Domain.DL.Models.LifeformModels.Eukaryote");

                    b.Property<bool>("IsBird")
                        .HasColumnType("bit");

                    b.Property<byte>("MaximumOffspringsPerMating")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MinimumOffspringsPerMating")
                        .HasColumnType("tinyint");

                    b.ToTable("Animalia");
                });

            modelBuilder.Entity("Domain.DL.Models.LifeformModels.Plantae", b =>
                {
                    b.HasBaseType("Domain.DL.Models.LifeformModels.Eukaryote");

                    b.Property<double>("MaximumHeight")
                        .HasColumnType("float");

                    b.ToTable("Plantae");
                });

            modelBuilder.Entity("Domain.DL.Models.LifeformModels.Animalia", b =>
                {
                    b.OwnsMany("Domain.DL.Models.LifeformModels.ValueObjects.AnimalMessage", "Messages", b1 =>
                        {
                            b1.Property<int>("AnimaliaId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<int>("MessageMessageId")
                                .HasColumnType("int");

                            b1.HasKey("AnimaliaId", "Id");

                            b1.ToTable("Animalia_Messages", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("AnimaliaId");
                        });

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Domain.DL.Models.LifeformModels.Plantae", b =>
                {
                    b.OwnsMany("Domain.DL.Models.LifeformModels.ValueObjects.PlantMessage", "Messages", b1 =>
                        {
                            b1.Property<int>("PlantaeId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<int>("MessageMessageId")
                                .HasColumnType("int");

                            b1.HasKey("PlantaeId", "Id");

                            b1.ToTable("Plantae_Messages", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PlantaeId");
                        });

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
